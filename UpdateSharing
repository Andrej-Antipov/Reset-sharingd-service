#!/bin/bash

clear && printf '\e[3J' && printf '\033[0;0H'

osascript -e "tell application \"Terminal\" to set the font size of window 1 to 12"
osascript -e "tell application \"Terminal\" to set background color of window 1 to {1028, 12850, 10240}"
osascript -e "tell application \"Terminal\" to set normal text color of window 1 to {65535, 65535, 65535}"


lines=25
printf '\e[8;'${lines}';80t' && printf '\e[3J' && printf "\033[0;0H"

printf "\033[?25l"

if [[ $loc = "ru" ]]; then
printf '\e[2m**************** \e[0m\e[36mПрограмма управления сервисом update sharingd\e[0m\e[2m *****************\e[0m\n'
else
printf '\e[2m**************** \e[0m\e[36m update sharingd Service Management Program  \e[0m\e[2m *****************\e[0m\n'
fi

cd "$(dirname "$0")"

if [[ ! -d ~/Library/LaunchAgents ]]; then mkdir ~/Library/LaunchAgents; fi

loc=`defaults read -g AppleLocale | cut -d "_" -f1`
if [[ ! $loc = "ru" ]]; then loc="en"; fi 

EXIT_PROGRAM(){
################################## очистка на выходе #############################################################
if [[ -f ~/.bash_history ]]; then cat  ~/.bash_history | sed -n '/UpdateSharing/!p' >> ~/new_hist.txt; rm ~/.bash_history; mv ~/new_hist.txt ~/.bash_history ; fi
if [[ -f ~/.zsh_history ]]; then cat  ~/.zsh_history | sed -n '/UpdateSharing/!p' >> ~/new_hist.txt; rm ~/.zsh_history; mv ~/new_hist.txt ~/.zsh_history ; fi
#####################################################################################################################

     osascript -e 'tell application "Terminal" to close first window' & exit
}

ENTER_TIMER(){
                        while true; do
                        unset demo
                                if [[ $loc = "ru" ]]; then
                        if demo=$(osascript -e 'set T to text returned of (display dialog "Время обновления sharingd (1 -99) сек:" '"${icon_string}"' buttons {"Отменить", "OK"} default button "OK" default answer "'"${timer}"'")'); then cancel=0; else cancel=1; fi 2>/dev/null
                                else
                        if demo=$(osascript -e 'set T to text returned of (display dialog "Update sharingd every (1-99) sec:" '"${icon_string}"' buttons {"Cancel", "OK"} default button "OK" default answer "'"${timer}"'")'); then cancel=0; else cancel=1; fi 2>/dev/null 
                                fi
                        if [[ $cancel = 1 ]]; then break
                            else
                        demo=$( echo ${demo//[^0-9]/} )
                        if [[ "${demo}" -gt "0" ]] && [[ "${demo}" -lt 100 ]]; then break; fi
                        fi
                        done
}

CLEAR_PLACE(){

                    printf "\033[H"
                    printf "\033['$free_lines';0f"
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf ' %.0s' {1..80}
                    printf '\r\033[9A'

}

SET_INPUT(){

layout_name=`defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleSelectedInputSources | egrep -w 'KeyboardLayout Name' | sed -E 's/.+ = "?([^"]+)"?;/\1/' | tr -d "\n"`
xkbs=1

case ${layout_name} in
 "Russian"          ) xkbs=2 ;;
 "RussianWin"       ) xkbs=2 ;;
 "Russian-Phonetic" ) xkbs=2 ;;
 "Ukrainian"        ) xkbs=2 ;;
 "Ukrainian-PC"     ) xkbs=2 ;;
 "Byelorussian"     ) xkbs=2 ;;
 esac

if [[ $xkbs = 2 ]]; then 
cd "$(dirname "$0")"
    if [[ -f "./tools/xkbswitch" ]]; then 
declare -a layouts_names
layouts=`defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleInputSourceHistory | egrep -w 'KeyboardLayout Name' | sed -E 's/.+ = "?([^"]+)"?;/\1/' | tr  '\n' ';'`
IFS=";"; layouts_names=($layouts); unset IFS; num=${#layouts_names[@]}
keyboard="0"

while [ $num != 0 ]; do 
case ${layouts_names[$num]} in
 "ABC"                ) keyboard=${layouts_names[$num]} ;;
 "US Extended"        ) keyboard="USExtended" ;;
 "USInternational-PC" ) keyboard=${layouts_names[$num]} ;;
 "U.S."               ) keyboard="US" ;;
 "British"            ) keyboard=${layouts_names[$num]} ;;
 "British-PC"         ) keyboard=${layouts_names[$num]} ;;
esac

        if [[ ! $keyboard = "0" ]]; then num=1; fi
let "num--"
done

if [[ ! $keyboard = "0" ]]; then ./tools/xkbswitch -se $keyboard; fi
   else
if [[ $loc = "ru" ]]; then        
printf '\r               \e[1;33;5m!!!  Смените раскладку на латиницу   !!!\e[0m               '
else
printf '\r               \e[1;33;5m!!!   Change the layout to Latin     !!!\e[0m               '
fi
read -t 2 -s 
printf '\r                                        \r'
       
 fi
fi
}

GET_INPUT(){
unset inputs
old_rs_lan="${rs_lan}"
while [[ ! ${inputs} =~ ^[0-5qQa]+$ ]]; do
printf "\033[?25l"
if [[ $loc = "ru" ]]; then             
printf '  Введите символ от \e[1;33m1\e[0m до \e[1;36m5\e[0m, (или \e[1;35mQ\e[0m - выход ):   ' ; printf '                             '
else
printf '  Enter a number from \e[1;33m1\e[0m to \e[1;36m5\e[0m, (or \e[1;35mQ\e[0m - exit ):  ' ; printf '                            '
fi			
printf "%"80"s"'\n'"%"80"s"'\n'"%"80"s"'\n'"%"80"s"
printf "\033[4A"
printf "\r\033[46C"
printf "\033[?25h"
SET_INPUT
CHECK_UPDATE_SHARINGD
if [[ "${rs_lan}" = "${old_rs_lan}" ]]; then 
read -rsn1 -t2 inputs 
else 
old_rs_lan="${rs_lan}"; inputs=0
fi
printf "\r"
done
printf "\033[?25l"
}

CHECK_UPDATE_SHARINGD(){

if [[ $loc = "ru" ]]; then
if [[ $(launchctl list | grep "UpdateSharing.job" | cut -f3 | grep -x "UpdateSharing.job") ]]; then  rs_lan="работает"
        else
if [[ ! -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then rs_lan="не установлен"
            else
                 rs_lan="остановлен"
        fi
fi
else
if [[ $(launchctl list | grep "UpdateSharing.job" | cut -f3 | grep -x "UpdateSharing.job") ]]; then  rs_lan="started"
        else
if [[ ! -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then rs_lan="not installed"
            else
                 rs_lan="stopped"
        fi
fi
fi
}

SHOW_MENU(){

CHECK_UPDATE_SHARINGD

free_lines=17

printf '\e[8;'${lines}';80t' && printf '\e[3J' && printf "\033[0;0H"
if [[ $loc = "ru" ]]; then
printf '\e[2m**************** \e[0m\e[36mПрограмма управления сервисом update sharingd\e[0m\e[2m *****************\e[0m\n'
else
printf '\e[2m**************** \e[0m\e[36m update sharingd Service Management Program  \e[0m\e[2m *****************\e[0m\n'
fi
printf ' %.0s' {1..80}
printf '.%.0s' {1..80}
printf ' %.0s' {1..80}
if [[ $loc = "ru" ]]; then
        if [[ $rs_lan = "работает" ]]; then
        printf '               \e[1;32m     Сервис \e[0mupdate sharingd \e[1;32m'"$rs_lan"'\e[0m                  \n'
        else
        printf '               \e[1;33m     Сервис \e[0mupdate sharingd \e[1;33m'"$rs_lan"'\e[0m                  \n'
        fi
else
        if [[ $rs_lan = "started" ]]; then
        printf '               \e[1;32m     Service \e[0mupdate sharingd \e[1;32m'"$rs_lan"'\e[0m                 \n'
        else
        printf '               \e[1;33m     Service \e[0mupdate sharingd \e[1;33m'"$rs_lan"'\e[0m                 \n'
        fi
fi
printf ' %.0s' {1..80}
printf '.%.0s' {1..80}
printf '\n'
printf ' %.0s' {1..80}
if [[ $loc = "ru" ]]; then
    printf '          \e[1;33m1.\e[0m Установить сервис update sharingd           \n'
    printf '          \e[1;33m2.\e[0m Изменить время обновления sharingd          \n'
    printf '          \e[1;33m3.\e[0m Остановить                   \n'
    printf '          \e[1;33m4.\e[0m Запустить                 \n'
    printf '          \e[1;33m5.\e[0m Удалить сервис update sharingd          \n'   
    printf '          \e[1;35mQ.\e[0m Выйти из программы настройки       \n'
else
    printf '          \e[1;33m1.\e[0m Install update sharingd service             \n'
    printf '          \e[1;33m2.\e[0m Change sharingd update interval             \n'
    printf '          \e[1;33m3.\e[0m Stop the service                            \n'
    printf '          \e[1;33m4.\e[0m Start the service                           \n'
    printf '          \e[1;33m5.\e[0m Remove update sharingd service              \n'
    printf '          \e[1;35mQ.\e[0m Exit the program                   \n'
fi
printf ' %.0s' {1..80}
}

SET_TIMER(){
if [[ -f ~/Library/Application\ Support/UpdateSharing/timer.txt ]]; then timer=$( cat ~/Library/Application\ Support/UpdateSharing/timer.txt )
    else
        timer=15
        echo ${timer} >> ~/Library/Application\ Support/UpdateSharing/timer.txt
fi
}

######################################## MAIN ##########################################################################################
free_lines=8
var4=0

while [[ ! $var4 = 1 ]] 
do
printf '\e[3J' && printf "\033[0;0H" 
printf "\033[?25l"
SHOW_MENU
osascript -e 'tell application "Terminal" to activate'
#SET_INPUT
GET_INPUT

if [[ $inputs = 0 ]]; then
            CLEAR_PLACE
            CHECK_UPDATE_SHARINGD
fi

if [[ $inputs = 1 ]]; then
            CLEAR_PLACE
            CHECK_UPDATE_SHARINGD
 if [[ $loc = "ru" ]]; then
            if [[ ! $rs_lan = "остановлен" ]] || [[ ! $rs_lan = "работает" ]]; then
            if [[ -f tools/UpdateSharing.plist ]] && [[ -f tools/UpdateSharing.sh ]] && [[ -d tools/terminal-notifier.app ]]; then
                if [[ ! -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then cp -a tools/UpdateSharing.plist ~/Library/LaunchAgents; fi
                plutil -remove ProgramArguments.0 ~/Library/LaunchAgents/UpdateSharing.plist
                plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/.UpdateSharing.sh" ~/Library/LaunchAgents/UpdateSharing.plist
                if [[ ! -f ~/.UpdateSharing.sh ]]; then cp -a tools/UpdateSharing.sh ~/.UpdateSharing.sh; chmod u+x ~/.UpdateSharing.sh; fi
                if [[ ! -d ~/Library/Application\ Support/UpdateSharing ]]; then mkdir  ~/Library/Application\ Support/UpdateSharing; fi
                if [[ ! $rs_lan = "работает" ]]; then  SET_TIMER; launchctl load -w ~/Library/LaunchAgents/UpdateSharing.plist; fi
                cp -a tools/terminal-notifier.app ~/Library/Application\ Support/UpdateSharing
           else
                printf '\n   Не найдены файлы для установки. Поместите их в папку tools с установщиком\n'
                printf '\n'
        
          fi
    fi
            
 else
            if [[ ! $rs_lan = "stopped" ]] || [[ ! $rs_lan = "started" ]]; then
            if [[ -f tools/UpdateSharing.plist ]] && [[ -f tools/UpdateSharing.sh ]] && [[ -d tools/terminal-notifier.app ]]; then
                if [[ ! -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then cp -a tools/UpdateSharing.plist ~/Library/LaunchAgents; fi
                plutil -remove ProgramArguments.0 ~/Library/LaunchAgents/UpdateSharing.plist
                plutil -insert ProgramArguments.0 -string "/Users/$(whoami)/.UpdateSharing.sh" ~/Library/LaunchAgents/UpdateSharing.plist
                if [[ ! -f ~/.UpdateSharing.sh ]]; then cp -a tools/UpdateSharing.sh ~/.UpdateSharing.sh; chmod u+x ~/.UpdateSharing.sh; fi
                if [[ ! -d ~/Library/Application\ Support/UpdateSharing ]]; then mkdir  ~/Library/Application\ Support/UpdateSharing; fi
                if [[ ! $rs_lan = "started" ]]; then  SET_TIMER; launchctl load -w ~/Library/LaunchAgents/UpdateSharing.plist; fi
                cp -a tools/terminal-notifier.app ~/Library/Application\ Support/UpdateSharing
           else
                printf '\n   No installation files found. Put them in the installer tools folder      \n'
                printf '\n'
        
          fi
    fi
 fi

read -n 1 -t 1
CLEAR_PLACE
fi

if [[ $inputs = 2 ]]; then
    if [[ -f ~/Library/Application\ Support/UpdateSharing/timer.txt ]]; then 
        ENTER_TIMER
        if [[ $cancel = 0 ]] && [[ ! $demo = "" ]]; then 
                if [[ ! ${timer} = ${demo} ]]; then timer=$demo
                rm -f ~/Library/Application\ Support/UpdateSharing/timer.txt
                echo $timer >> ~/Library/Application\ Support/UpdateSharing/timer.txt
                launchctl unload -w ~/Library/LaunchAgents/UpdateSharing.plist 2>/dev/null
                launchctl load -w ~/Library/LaunchAgents/UpdateSharing.plist 2>/dev/null
                fi
        fi
    fi
fi
        

if [[ $inputs = 3 ]]; then
    CHECK_UPDATE_SHARINGD
    if [[ $loc = "ru" ]]; then
        if [[ $rs_lan = "работает" ]]; then
        if [[ -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then
            launchctl unload -w ~/Library/LaunchAgents/UpdateSharing.plist; fi
        fi
    else
        if [[ $rs_lan = "started" ]]; then
        if [[ -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then
            launchctl unload -w ~/Library/LaunchAgents/UpdateSharing.plist; fi
        fi
    fi
    CLEAR_PLACE
fi

if [[ $inputs = 4 ]]; then
     CHECK_UPDATE_SHARINGD
    if [[ $loc = "ru" ]]; then
        if [[ $rs_lan = "остановлен" ]]; then
        if [[ -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then
            launchctl load -w ~/Library/LaunchAgents/UpdateSharing.plist; fi
        fi
     else
        if [[ $rs_lan = "stopped" ]]; then
        if [[ -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then
            launchctl load -w ~/Library/LaunchAgents/UpdateSharing.plist; fi
        fi
    fi
    CLEAR_PLACE
fi

if [[ $inputs = 5 ]]; then
    CHECK_UPDATE_SHARINGD
    if [[ $(launchctl list | grep "UpdateSharing.job" | cut -f3 | grep -x "UpdateSharing.job") ]]; then launchctl unload -w ~/Library/LaunchAgents/UpdateSharing.plist; fi 
    if [[ -f ~/Library/LaunchAgents/UpdateSharing.plist ]]; then rm ~/Library/LaunchAgents/UpdateSharing.plist; fi
    if [[ -f ~/.UpdateSharing.sh ]]; then rm ~/.UpdateSharing.sh; fi
    rm -Rf  ~/Library/Application\ Support/UpdateSharing
    read -n 1 -t 1
    CLEAR_PLACE
fi

if [[ $inputs = [qQ] ]]; then var4=1; fi

done

clear

EXIT_PROGRAM






